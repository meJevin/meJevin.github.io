[{"/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/App.tsx":"1","/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/index.tsx":"2","/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/Pages/NotFoundPage.tsx":"3","/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/Pages/HomePage.tsx":"4","/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/Pages/AboutPage.tsx":"5","/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/Pages/MyWorkPage.tsx":"6","/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/Components/Header.tsx":"7"},{"size":1043,"mtime":1618679259467,"results":"8","hashOfConfig":"9"},{"size":305,"mtime":1618591749397,"results":"10","hashOfConfig":"9"},{"size":170,"mtime":1618592349423,"results":"11","hashOfConfig":"9"},{"size":246,"mtime":1618607974568,"results":"12","hashOfConfig":"9"},{"size":246,"mtime":1618608059934,"results":"13","hashOfConfig":"9"},{"size":249,"mtime":1618608157785,"results":"14","hashOfConfig":"9"},{"size":3090,"mtime":1618681520456,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"127oe61",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/App.tsx",[],"/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/index.tsx",[],"/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/Pages/NotFoundPage.tsx",[],"/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/Pages/HomePage.tsx",[],"/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/Pages/AboutPage.tsx",[],"/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/Pages/MyWorkPage.tsx",[],"/Users/pinkveil/Desktop/Dev/Personal/meJevin.github.io/new/website/src/Components/Header.tsx",["31"],"import React, { useEffect, useState } from 'react';\nimport { Link, RouteComponentProps, useLocation } from 'react-router-dom';\n\nexport interface MenuItem {\n    title: string;\n    linkTo: string;\n}\n\ninterface Props {\n    menuItems: MenuItem[];\n}\n\nconst Header: React.FC<Props> = (props) => {\n    \n    let location = useLocation();\n\n    console.log(location);\n\n    let [currentHashRoute, setCurrentHashRoute] = useState(\"\");\n\n    currentHashRoute = document.location.hash.replace('#', '');\n\n    const [isMenuOpen, setIsMenuOpen] = useState(true);\n\n    const [menuButtonClass, setMenuButtonClass] = useState(\"menu-btn\");\n    const [menuNavClass, setMenuNavClass] = useState(\"menu-nav\");\n    const [menuClass, setMenuClass] = useState(\"menu\");\n    const [menuBrandingClass, setMenuBrandingClass] = useState(\"menu-branding\");\n    const [navItemClass, setNavItemClass] = useState(\"nav-item\");\n\n    console.log(\"Initial render!\");\n\n    useEffect(() => {\n        console.log(\"Use effect!\");\n    });\n\n\n    const menuButtonClicked = () => {\n        if (isMenuOpen) {\n            // Hide it\n\n            setIsMenuOpen(false);\n            setMenuButtonClass(\"menu-btn close\");\n            setMenuNavClass(\"menu-nav show\");\n            setMenuClass(\"menu show\");\n            setMenuBrandingClass(\"menu-branding show\");\n            setNavItemClass(\"nav-item show\");\n        }\n        else {\n            // Show it\n\n            setIsMenuOpen(true);\n            setMenuButtonClass(\"menu-btn\");\n            setMenuNavClass(\"menu-nav\");\n            setMenuClass(\"menu\");\n            setMenuBrandingClass(\"menu-branding\");\n            setNavItemClass(\"nav-item\");\n        }\n    };\n    \n    const handleMenuItemClick = (newRoute: string) => {\n        setCurrentHashRoute(newRoute);\n    };\n\n    return (\n        <header>\n            <div className={menuButtonClass} onClick={menuButtonClicked}>\n                <div className=\"btn-line\"></div>\n                <div className=\"btn-line\"></div>\n                <div className=\"btn-line\"></div>\n            </div>\n\n            <nav className={menuClass}>\n                <div className={menuBrandingClass}>\n                    <div className=\"portrait\"></div>\n                </div>\n\n                <ul className={menuNavClass}>\n                    {props.menuItems.map((menuItem) => {\n                        let navClass = navItemClass;\n\n                        if (currentHashRoute === menuItem.linkTo) {\n                            navClass += \" current\";\n                        }\n\n                        return (\n                            <li className={navClass} key={menuItem.title+\"_\"+menuItem.linkTo}>\n                                <Link className=\"nav-link\" to={menuItem.linkTo} \n                                        onClick={() => handleMenuItemClick(menuItem.linkTo)}>\n                                    {menuItem.title}\n                                </Link>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </nav>  \n        </header>  \n    );\n}\n\nexport default Header;",{"ruleId":"32","severity":1,"message":"33","line":2,"column":16,"nodeType":"34","messageId":"35","endLine":2,"endColumn":35},"@typescript-eslint/no-unused-vars","'RouteComponentProps' is defined but never used.","Identifier","unusedVar"]